{
  "ver": "1.0.25",
  "uuid": "8ec9fda4-fd33-4b28-8601-70fea41a7a72",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat circle(in vec2 uv,in float radius){\n  return 1.0 - smoothstep(radius * (1.0 - 0.01),radius * (1.0 + 0.01),length(uv));\n}\nconst float PI = 3.141592653;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 0);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n    const float R = 0.45;\n    const float num = 12.0;\n    float radius = 0.05;\n    float rotation = 0.0;\n    vec2 pos = vec2(0,0);\n    vec2 uv = v_uv0 - 0.5;\n    float time = cc_time.x;\n    for(float i = 0.0; i < num; i++){\n      rotation = 2.0 * PI * i / num + time*2.0*PI/4.0;\n      pos = vec2(R * cos(rotation), R * sin(rotation));\n      o.a += circle(uv - pos,radius * (sin(rotation*0.5)+1.0)/3.0 + radius/3.0);\n      o.r += o.a * (sin(i/num + time + PI*6.0/3.0)+ 1.0)/2.0;\n      o.g += o.a * (sin(i/num + time + PI*4.0/3.0)+1.0)/2.0;\n      o.b += o.a * (sin(i/num + time + PI*2.0/3.0)+1.0)/2.0;\n    };\n  #endif\n  o *= v_color;\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat circle(in vec2 uv,in float radius){\n  return 1.0 - smoothstep(radius * (1.0 - 0.01),radius * (1.0 + 0.01),length(uv));\n}\nconst float PI = 3.141592653;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 0);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n    const float R = 0.45;\n    const float num = 12.0;\n    float radius = 0.05;\n    float rotation = 0.0;\n    vec2 pos = vec2(0,0);\n    vec2 uv = v_uv0 - 0.5;\n    float time = cc_time.x;\n    for(float i = 0.0; i < num; i++){\n      rotation = 2.0 * PI * i / num + time*2.0*PI/4.0;\n      pos = vec2(R * cos(rotation), R * sin(rotation));\n      o.a += circle(uv - pos,radius * (sin(rotation*0.5)+1.0)/3.0 + radius/3.0);\n      o.r += o.a * (sin(i/num + time + PI*6.0/3.0)+ 1.0)/2.0;\n      o.g += o.a * (sin(i/num + time + PI*4.0/3.0)+1.0)/2.0;\n      o.b += o.a * (sin(i/num + time + PI*2.0/3.0)+1.0)/2.0;\n    };\n  #endif\n  o *= v_color;\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}